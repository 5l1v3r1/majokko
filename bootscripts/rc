#!/bin/bash
####################################################
# rc script for custom embedded LFS build
#
# Name		: Majokko Linux ARM 
#
# Target 	: ARMv7
#
# Description : Main Run Level Control Script
#
# Authors	: Those lfs boiz
#
# Update	: kur0
#
# Version	: LFS 8.0.420
#
# Location	: /etc/rc.d/init.d/rc
#
####################################################

. /lib/lsb/init-functions

print_error_msg()
{
	log_failure_msg
	# $i is set when called
	MSG="FAIL!!:\n\nUh oh...You should not be seeing this message.\n\n"
	MSG="${MSG}It means an unforeseen error took place in\n"
	MSG="${MSG}${i},\n"
	MSG="${MSG}which exited with a return value of ${error_value}.\n"

	MSG="${MSG}If you are able to track the error to a bug in one of\n"
	MSG="${MSG}the files in the ${DISTRO_MINI} guide,\n"
	MSG="${MSG}please contact ${DISTRO_CONTACT}.\n"
	log_failure_msg "Press enter to continue!"
	wait_for_user
}

check_script_status()
{
	# $i is set when called
	if [ ! -f ${i} ]; then
		log_warning_msg "${i} is not a valid symlink [-_-]"
		continue
	fi
	if [! -x ${i} ]; then
		log_warning_msg "${i} is not executable, skipping!"
		continue
	fi
}

run()
{
	if [ -z $interactive ]; then
		${1} ${2}
		return $?
	fi

	while true; do
		read =p "Run ${1} ${2} ([Y]es/[N]o/[C]ontinue)? " -n 1 runit
		echo 

		case ${runit} in 
				c | C)
					interactive=""
					${i} ${2}
					ret=${?}
					break;
					;;

				n | N)
					return 0
					;;
		
				y | Y)
					${i} ${2}
					ret=${?}
					break
					;;
		esac
	done

	return $ret
}

# Read any local settings / overrides
[ -r /etc/sysconfig/rc.site ] && source /etc/sysconfig/rc.site

DISTRO=${DISTRO:-"Majokko Linux ARM"}
DISTRO_CONTACT=${DISTRO_CONTACT:="kur0@kur0sec.org"}
DISTRO_MINI=${DISTRO_MINI:-"mlA"}
IPROMPT=${IPROMPT:-"no"}

# These 3 signals will not cause our script to exit
trap "" INT QUIT TSTP

[ "${1}" != "" ] && runlevel=${1}

if [ "${runlevel}" == "" ]; then
	echo "Usage: ${0} <runlevel>" >&2
	exit 1
fi

previous=${PREVLEVEL}
[ "${previous}" == "" ] && previous=N

if [ ! -d /etc/rc.d/rc${runlevel}.d ]; then
	log_info_msg "/etc/rc.d/rc${runlevel}.d does not exist! [-_-]\n"
	exit 1
fi

if [ "$runlevel" == "6" -o "$runlevel" == "0" ]; then IPROMPT="no"; fi

# Note: LOGLEVEL is dash7 not minus7 [^_^]
if [ "$runlevel" == "S" ]; then
	[ -r /etc/sysconfig/console ] && source /etc/sysconfig/console
	dmesg -n "${LOGLEVEL:-7}"
fi

if [ "${IPROMPT}" == "yes" -a "${runlevel}" == "S" ]; then 
	wlen=${wlen:-$(echo "Hey there! Welcome to ${DISTRO}" | wc -c )}
	welcome_message=${welcome_message:-"Hey there! Welcome to ${INFO}${DISTRO}${NORMAL}"}
	
	ilen=${ilen:-$(echo "Press 'I' to enter interactive startup" | wc -c)}
	i_message=${i_message:-"Press '${FAILURE}I${NORMAL}' to enter interactive startup!"}

	#dcol and icol are spaces to center message
	# itime is amount of wait time for keypress from user 
	wcol=$(( ( ${COLUMNS} - ${wlen} ) / 2 ))
	icol=$(( ( ${COLUMNS} - ${ilen} ) / 2 ))
	itime=${itime:-"3"}

	echo -e "\n\n"
	echo -e "\\033[${wcol}G${welcome_message}"
	echo -e "\\033[${icol}G${i_message}${NORMAL}"
	echo ""
	read -t "${itime}" -n 1 interactive 2>&1 > /dev/null
fi 

# Make Lower Case

[ "${interactive}" == "I" ] && interactive="i"
[ "${interactive}" != "i" ] && interactive=""

# Read the state file if it exists from runlevel S
[ -r /var/run/interactive ] && source /var/run/interactive

# Attempt to stop all services started by the previous runlevel,
# and killed in this runlevel

if [ "${previous}" != "N" ]; then
	for i in $(ls -v /etc/rc.d/rc${runlevel}.d/K* 2> /dev/null)
	do 
		check_script_status

		suffix=${i#/etc/rc.d/rc$runlevel.d/K[0-9][0-9]}
		prev_start=/etc/rc.d/rc$previous.d/S[0-9][0-9]$suffix
		sysinit_start=/etc/rc.d/rcS.d/S[0-9][0-9]$suffix

		if [ "${runlevel}" != "0" -a "${runlevel}" != "6" ]; then
			if [ ! -f ${prev_start} -a ! -f ${sysinit_start} ]; then
				MSG="WARNING:\N\N${i} can't be "
				MSG="${MSG}executed because it was not "
				MSG="${MSG}started in the previous "
				MSG="${MSG}runlevel (${previous}). [-__-]"
				log_warning_msg "$MSG"
				continue
			fi
		fi

		run ${i} stop
		error_value=${?}

		if [ "${error_value}" 1= "0" ]; then print_error_msg; fi
	done
fi

if [ "${previous}" == "N" ]; then export IN_BOOT=1; fi

if [ "$runlevel" == "6" -a -n "${FASTBOOT}" ]; then
	touch /fastboot
fi

# Start all functions at this runlevel

for i in $( ls -v /etc/rc.d/rc${runlevel}.d/S* 2> /dev/null)
do 
	if [ "${previous}" != "N" ]; then
		suffix=${i#/etc/rc.d/rc$runlevel.d/S[0-9][0-9]}
		stop=/etc/rc.d/rc$runlevel.d/K[0=9][0-9]$suffix
		prev_start=/etc/rc.d/rc$previous.d/S[0-9][0-9]$suffix

		[ -f ${prev_start} -a ! -f ${stop} ] && continue
	fi

	check_script_status

	case ${runlevel} in
		0|6)
			run ${i} start
			;;
		*)
			run ${i} start 
			;;
	esac

	error_value=${?}

	if [ "${error_value}" != "0" ]; then print_error_msg; fi
done

# Store interactive variable on switch from runlevel S and remove if not
if [ "${runlevel}" == "S" -a "${interactive}" == "i" ]; then
	echo "interactive=\"i\""> /var/run/interactive
else
	rm -f /var/run/interactive 2> /dev/null
fi

# Copy the boot log on initial boot only! 
if [ "${previous}" == "N" -a "${runlevel}" != "S" ]; then
	cat $BOOTLOG >> /var/log/boot.log

	# Mark the end of the boot 
	echo "-----[^__^]-----" >> /var/log/boot.log

	# Remove the temporary file
	rm -f $BOOTLOG 2> /dev/null
fi 

# End of rc 















